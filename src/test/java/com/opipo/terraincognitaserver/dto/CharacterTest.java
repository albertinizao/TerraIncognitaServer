package com.opipo.terraincognitaserver.dto;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

@DisplayName("Character autogenerated")
public class CharacterTest {

    private Character character;

    @BeforeEach
    public void init() {
        character = new Character();
    }

    @Test
    @DisplayName("The getter and the setter of name work well")
    public void nameAttributeTest() {
        String name = Integer.toString(1);
        character.setName(name);
        assertEquals(name, character.getName());
    }

    @Test
    @DisplayName("The getter and the setter of description work well")
    public void descriptionAttributeTest() {
        String description = Integer.toString(2);
        character.setDescription(description);
        assertEquals(description, character.getDescription());
    }

    @Test
    @DisplayName("The getter and the setter of characterType work well")
    public void characterTypeAttributeTest() {
        CharacterType characterType = this.buildCharacterType();
        character.setCharacterType(characterType);
        assertEquals(characterType, character.getCharacterType());
    }

    private CharacterType buildCharacterType() {
        return CharacterType.PJ;
    }

    @Test
    public void givenSameObjReturnThatTheyAreEquals() {
        Character o1 = new Character();
        Character o2 = new Character();
        assertEquals(o1, o2);
    }

    @Test
    public void givenSameObjReturnZero() {
        Character o1 = new Character();
        Character o2 = new Character();
        assertEquals(0, o1.compareTo(o2));
    }

    @Test
    public void givenObjectFromOtherClassReturnThatTheyArentEquals() {
        Character o1 = new Character();
        assertNotEquals(o1, new String());
    }

    @Test
    public void givenSameObjReturnSameHashCode() {
        Character o1 = new Character();
        Character o2 = new Character();
        assertEquals(o1.hashCode(), o2.hashCode());
    }

}